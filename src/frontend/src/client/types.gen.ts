// This file is auto-generated by @hey-api/openapi-ts

/**
 * ConnectionQuestionData
 */
export type ConnectionQuestionData = {
    id: number;
    question_id: number;
    question_text: string;
    question_answered: boolean;
    answered_correctly: boolean;
};

/**
 * ConnectionStatus
 */
export type ConnectionStatus = 'pending' | 'active' | 'completed' | 'cancelled';

/**
 * GameChatRequest
 */
export type GameChatRequest = {
    message: string;
};

/**
 * GameQuestionResponse
 */
export type GameQuestionResponse = {
    question_id: number;
    answer: string;
};

/**
 * GameStartRequest
 */
export type GameStartRequest = {
    event_id: number;
};

/**
 * GameStatus
 */
export type GameStatus = {
    user_status: UserStatus;
    qr_code?: string | null;
    partner_name?: string | null;
    connection_questions?: Array<ConnectionQuestionData> | null;
};

/**
 * GameStopRequest
 */
export type GameStopRequest = {
    event_id: number;
};

/**
 * GetConnection
 */
export type GetConnection = {
    id: number;
    start_time: string;
    end_time: string;
    status: ConnectionStatus;
    event_id: number;
    user1_id: number;
    user2_id: number;
    created_at: string;
    updated_at: string;
};

/**
 * GetEvent
 */
export type GetEvent = {
    id: number;
    name: string;
    code: string;
    is_active: boolean;
    whitelist: {
        [key: string]: unknown;
    };
    created_at: string;
    updated_at: string;
};

/**
 * GetQuestion
 */
export type GetQuestion = {
    id: number;
    question: string;
    is_signup_question: boolean;
    is_game_question: boolean;
    created_at: string;
    updated_at: string;
};

/**
 * GetUser
 */
export type GetUser = {
    id: number;
    name: string;
    email: string;
    points: number;
    qr_code: string;
    connection_count: number;
    status: UserStatus;
    is_admin: boolean;
    event_id?: number | null;
    created_at: string;
    updated_at: string;
};

/**
 * GetUserAnswer
 */
export type GetUserAnswer = {
    id: number;
    answer: string;
    user_id: number;
    question_id: number;
    created_at: string;
    updated_at: string;
};

/**
 * PatchConnection
 */
export type PatchConnection = {
    start_time?: string;
    end_time?: string;
    status?: ConnectionStatus;
    event_id?: number;
    user1_id?: number;
    user2_id?: number;
};

/**
 * PatchEvent
 */
export type PatchEvent = {
    name?: string;
    code?: string;
    is_active?: boolean;
    whitelist?: {
        [key: string]: unknown;
    };
};

/**
 * PatchQuestion
 */
export type PatchQuestion = {
    question?: string;
    is_signup_question?: boolean;
    is_game_question?: boolean;
};

/**
 * PatchUser
 */
export type PatchUser = {
    name?: string;
};

/**
 * PatchUserAnswer
 */
export type PatchUserAnswer = {
    answer?: string;
};

/**
 * PostConnection
 */
export type PostConnection = {
    event_id: number;
    user1_id: number;
    user2_id: number;
    end_time?: string;
};

/**
 * PostEvent
 */
export type PostEvent = {
    name: string;
    code: string;
};

/**
 * PostLogin
 */
export type PostLogin = {
    email: string;
    event_code: string;
};

/**
 * PostQuestion
 */
export type PostQuestion = {
    question: string;
    is_signup_question: boolean;
    is_game_question: boolean;
};

/**
 * PostUser
 */
export type PostUser = {
    name: string;
    email: string;
    event_code: string;
    user_answer: Array<PostUserAnswer>;
};

/**
 * PostUserAnswer
 */
export type PostUserAnswer = {
    answer: string;
    question_id: number;
};

/**
 * QRScanRequest
 */
export type QrScanRequest = {
    qr_code: string;
};

/**
 * QuestionResult
 */
export type QuestionResult = {
    correct: boolean;
    expected_answer: string;
    your_answer: string;
};

/**
 * UserStatus
 */
export type UserStatus = 'available' | 'connecting' | 'busy';

export type ApiAuthMeGetUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/me';
};

export type ApiAuthMeGetUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetUser;
};

export type ApiAuthMeGetUserResponse = ApiAuthMeGetUserResponses[keyof ApiAuthMeGetUserResponses];

export type ApiAuthLoginLoginData = {
    body: PostLogin;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type ApiAuthLoginLoginErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiAuthLoginLoginError = ApiAuthLoginLoginErrors[keyof ApiAuthLoginLoginErrors];

export type ApiAuthLoginLoginResponses = {
    /**
     * Document created, URL follows
     */
    201: {
        [key: string]: unknown;
    };
};

export type ApiAuthLoginLoginResponse = ApiAuthLoginLoginResponses[keyof ApiAuthLoginLoginResponses];

export type ApiAuthLogoutLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type ApiAuthLogoutLogoutResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        [key: string]: unknown;
    };
};

export type ApiAuthLogoutLogoutResponse = ApiAuthLogoutLogoutResponses[keyof ApiAuthLogoutLogoutResponses];

export type ApiConnectionsConnectionIdDeleteConnectionData = {
    body?: never;
    path: {
        connection_id: number;
    };
    query?: never;
    url: '/api/connections/{connection_id}';
};

export type ApiConnectionsConnectionIdDeleteConnectionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiConnectionsConnectionIdDeleteConnectionError = ApiConnectionsConnectionIdDeleteConnectionErrors[keyof ApiConnectionsConnectionIdDeleteConnectionErrors];

export type ApiConnectionsConnectionIdDeleteConnectionResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetConnection;
};

export type ApiConnectionsConnectionIdDeleteConnectionResponse = ApiConnectionsConnectionIdDeleteConnectionResponses[keyof ApiConnectionsConnectionIdDeleteConnectionResponses];

export type ApiConnectionsConnectionIdGetConnectionData = {
    body?: never;
    path: {
        connection_id: number;
    };
    query?: never;
    url: '/api/connections/{connection_id}';
};

export type ApiConnectionsConnectionIdGetConnectionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiConnectionsConnectionIdGetConnectionError = ApiConnectionsConnectionIdGetConnectionErrors[keyof ApiConnectionsConnectionIdGetConnectionErrors];

export type ApiConnectionsConnectionIdGetConnectionResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetConnection;
};

export type ApiConnectionsConnectionIdGetConnectionResponse = ApiConnectionsConnectionIdGetConnectionResponses[keyof ApiConnectionsConnectionIdGetConnectionResponses];

export type ApiConnectionsConnectionIdPatchConnectionData = {
    body: PatchConnection;
    path: {
        connection_id: number;
    };
    query?: never;
    url: '/api/connections/{connection_id}';
};

export type ApiConnectionsConnectionIdPatchConnectionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiConnectionsConnectionIdPatchConnectionError = ApiConnectionsConnectionIdPatchConnectionErrors[keyof ApiConnectionsConnectionIdPatchConnectionErrors];

export type ApiConnectionsConnectionIdPatchConnectionResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetConnection;
};

export type ApiConnectionsConnectionIdPatchConnectionResponse = ApiConnectionsConnectionIdPatchConnectionResponses[keyof ApiConnectionsConnectionIdPatchConnectionResponses];

export type ApiConnectionsGetConnectionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/connections';
};

export type ApiConnectionsGetConnectionsResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<GetConnection>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ApiConnectionsGetConnectionsResponse = ApiConnectionsGetConnectionsResponses[keyof ApiConnectionsGetConnectionsResponses];

export type ApiConnectionsPostConnectionData = {
    body: PostConnection;
    path?: never;
    query?: never;
    url: '/api/connections';
};

export type ApiConnectionsPostConnectionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiConnectionsPostConnectionError = ApiConnectionsPostConnectionErrors[keyof ApiConnectionsPostConnectionErrors];

export type ApiConnectionsPostConnectionResponses = {
    /**
     * Document created, URL follows
     */
    201: GetConnection;
};

export type ApiConnectionsPostConnectionResponse = ApiConnectionsPostConnectionResponses[keyof ApiConnectionsPostConnectionResponses];

export type ApiEventsEventIdDeleteEventData = {
    body?: never;
    path: {
        event_id: number;
    };
    query?: never;
    url: '/api/events/{event_id}';
};

export type ApiEventsEventIdDeleteEventErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiEventsEventIdDeleteEventError = ApiEventsEventIdDeleteEventErrors[keyof ApiEventsEventIdDeleteEventErrors];

export type ApiEventsEventIdDeleteEventResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetEvent;
};

export type ApiEventsEventIdDeleteEventResponse = ApiEventsEventIdDeleteEventResponses[keyof ApiEventsEventIdDeleteEventResponses];

export type ApiEventsEventIdGetEventData = {
    body?: never;
    path: {
        event_id: number;
    };
    query?: never;
    url: '/api/events/{event_id}';
};

export type ApiEventsEventIdGetEventErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiEventsEventIdGetEventError = ApiEventsEventIdGetEventErrors[keyof ApiEventsEventIdGetEventErrors];

export type ApiEventsEventIdGetEventResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetEvent;
};

export type ApiEventsEventIdGetEventResponse = ApiEventsEventIdGetEventResponses[keyof ApiEventsEventIdGetEventResponses];

export type ApiEventsEventIdPatchEventData = {
    body: PatchEvent;
    path: {
        event_id: number;
    };
    query?: never;
    url: '/api/events/{event_id}';
};

export type ApiEventsEventIdPatchEventErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiEventsEventIdPatchEventError = ApiEventsEventIdPatchEventErrors[keyof ApiEventsEventIdPatchEventErrors];

export type ApiEventsEventIdPatchEventResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetEvent;
};

export type ApiEventsEventIdPatchEventResponse = ApiEventsEventIdPatchEventResponses[keyof ApiEventsEventIdPatchEventResponses];

export type ApiEventsGetEventsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/events';
};

export type ApiEventsGetEventsResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<GetEvent>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ApiEventsGetEventsResponse = ApiEventsGetEventsResponses[keyof ApiEventsGetEventsResponses];

export type ApiEventsPostEventData = {
    body: PostEvent;
    path?: never;
    query?: never;
    url: '/api/events';
};

export type ApiEventsPostEventErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiEventsPostEventError = ApiEventsPostEventErrors[keyof ApiEventsPostEventErrors];

export type ApiEventsPostEventResponses = {
    /**
     * Document created, URL follows
     */
    201: GetEvent;
};

export type ApiEventsPostEventResponse = ApiEventsPostEventResponses[keyof ApiEventsPostEventResponses];

export type ApiGameAnswerQuestionAnswerQuestionData = {
    body: GameQuestionResponse;
    path?: never;
    query?: never;
    url: '/api/game/answer-question';
};

export type ApiGameAnswerQuestionAnswerQuestionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiGameAnswerQuestionAnswerQuestionError = ApiGameAnswerQuestionAnswerQuestionErrors[keyof ApiGameAnswerQuestionAnswerQuestionErrors];

export type ApiGameAnswerQuestionAnswerQuestionResponses = {
    /**
     * Document created, URL follows
     */
    201: QuestionResult;
};

export type ApiGameAnswerQuestionAnswerQuestionResponse = ApiGameAnswerQuestionAnswerQuestionResponses[keyof ApiGameAnswerQuestionAnswerQuestionResponses];

export type ApiGameChatChatData = {
    body: GameChatRequest;
    path?: never;
    query?: never;
    url: '/api/game/chat';
};

export type ApiGameChatChatErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiGameChatChatError = ApiGameChatChatErrors[keyof ApiGameChatChatErrors];

export type ApiGameChatChatResponses = {
    /**
     * Document created, URL follows
     */
    201: unknown;
};

export type ApiGameCompleteConnectionCompleteConnectionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/game/complete-connection';
};

export type ApiGameCompleteConnectionCompleteConnectionResponses = {
    /**
     * Document created, URL follows
     */
    201: unknown;
};

export type ApiGameStatusGetGameStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/game/status';
};

export type ApiGameStatusGetGameStatusResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GameStatus;
};

export type ApiGameStatusGetGameStatusResponse = ApiGameStatusGetGameStatusResponses[keyof ApiGameStatusGetGameStatusResponses];

export type ApiGameScanQrScanQrCodeData = {
    body: QrScanRequest;
    path?: never;
    query?: never;
    url: '/api/game/scan-qr';
};

export type ApiGameScanQrScanQrCodeErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiGameScanQrScanQrCodeError = ApiGameScanQrScanQrCodeErrors[keyof ApiGameScanQrScanQrCodeErrors];

export type ApiGameScanQrScanQrCodeResponses = {
    /**
     * Document created, URL follows
     */
    201: unknown;
};

export type ApiGameStartStartGameData = {
    body: GameStartRequest;
    path?: never;
    query?: never;
    url: '/api/game/start';
};

export type ApiGameStartStartGameErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiGameStartStartGameError = ApiGameStartStartGameErrors[keyof ApiGameStartStartGameErrors];

export type ApiGameStartStartGameResponses = {
    /**
     * Document created, URL follows
     */
    201: GetEvent;
};

export type ApiGameStartStartGameResponse = ApiGameStartStartGameResponses[keyof ApiGameStartStartGameResponses];

export type ApiGameStopStopGameData = {
    body: GameStopRequest;
    path?: never;
    query?: never;
    url: '/api/game/stop';
};

export type ApiGameStopStopGameErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiGameStopStopGameError = ApiGameStopStopGameErrors[keyof ApiGameStopStopGameErrors];

export type ApiGameStopStopGameResponses = {
    /**
     * Document created, URL follows
     */
    201: GetEvent;
};

export type ApiGameStopStopGameResponse = ApiGameStopStopGameResponses[keyof ApiGameStopStopGameResponses];

export type ApiQuestionsQuestionIdDeleteQuestionData = {
    body?: never;
    path: {
        question_id: number;
    };
    query?: never;
    url: '/api/questions/{question_id}';
};

export type ApiQuestionsQuestionIdDeleteQuestionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiQuestionsQuestionIdDeleteQuestionError = ApiQuestionsQuestionIdDeleteQuestionErrors[keyof ApiQuestionsQuestionIdDeleteQuestionErrors];

export type ApiQuestionsQuestionIdDeleteQuestionResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetQuestion;
};

export type ApiQuestionsQuestionIdDeleteQuestionResponse = ApiQuestionsQuestionIdDeleteQuestionResponses[keyof ApiQuestionsQuestionIdDeleteQuestionResponses];

export type ApiQuestionsQuestionIdGetQuestionData = {
    body?: never;
    path: {
        question_id: number;
    };
    query?: never;
    url: '/api/questions/{question_id}';
};

export type ApiQuestionsQuestionIdGetQuestionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiQuestionsQuestionIdGetQuestionError = ApiQuestionsQuestionIdGetQuestionErrors[keyof ApiQuestionsQuestionIdGetQuestionErrors];

export type ApiQuestionsQuestionIdGetQuestionResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetQuestion;
};

export type ApiQuestionsQuestionIdGetQuestionResponse = ApiQuestionsQuestionIdGetQuestionResponses[keyof ApiQuestionsQuestionIdGetQuestionResponses];

export type ApiQuestionsQuestionIdPatchQuestionData = {
    body: PatchQuestion;
    path: {
        question_id: number;
    };
    query?: never;
    url: '/api/questions/{question_id}';
};

export type ApiQuestionsQuestionIdPatchQuestionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiQuestionsQuestionIdPatchQuestionError = ApiQuestionsQuestionIdPatchQuestionErrors[keyof ApiQuestionsQuestionIdPatchQuestionErrors];

export type ApiQuestionsQuestionIdPatchQuestionResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetQuestion;
};

export type ApiQuestionsQuestionIdPatchQuestionResponse = ApiQuestionsQuestionIdPatchQuestionResponses[keyof ApiQuestionsQuestionIdPatchQuestionResponses];

export type ApiQuestionsGetQuestionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/questions';
};

export type ApiQuestionsGetQuestionsResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<GetQuestion>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ApiQuestionsGetQuestionsResponse = ApiQuestionsGetQuestionsResponses[keyof ApiQuestionsGetQuestionsResponses];

export type ApiQuestionsPostQuestionData = {
    body: PostQuestion;
    path?: never;
    query?: never;
    url: '/api/questions';
};

export type ApiQuestionsPostQuestionErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiQuestionsPostQuestionError = ApiQuestionsPostQuestionErrors[keyof ApiQuestionsPostQuestionErrors];

export type ApiQuestionsPostQuestionResponses = {
    /**
     * Document created, URL follows
     */
    201: GetQuestion;
};

export type ApiQuestionsPostQuestionResponse = ApiQuestionsPostQuestionResponses[keyof ApiQuestionsPostQuestionResponses];

export type ApiUsersUserIdDeleteUserData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type ApiUsersUserIdDeleteUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUsersUserIdDeleteUserError = ApiUsersUserIdDeleteUserErrors[keyof ApiUsersUserIdDeleteUserErrors];

export type ApiUsersUserIdDeleteUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetUser;
};

export type ApiUsersUserIdDeleteUserResponse = ApiUsersUserIdDeleteUserResponses[keyof ApiUsersUserIdDeleteUserResponses];

export type ApiUsersUserIdGetUserData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type ApiUsersUserIdGetUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUsersUserIdGetUserError = ApiUsersUserIdGetUserErrors[keyof ApiUsersUserIdGetUserErrors];

export type ApiUsersUserIdGetUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetUser;
};

export type ApiUsersUserIdGetUserResponse = ApiUsersUserIdGetUserResponses[keyof ApiUsersUserIdGetUserResponses];

export type ApiUsersUserIdPatchUserData = {
    body: PatchUser;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type ApiUsersUserIdPatchUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUsersUserIdPatchUserError = ApiUsersUserIdPatchUserErrors[keyof ApiUsersUserIdPatchUserErrors];

export type ApiUsersUserIdPatchUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetUser;
};

export type ApiUsersUserIdPatchUserResponse = ApiUsersUserIdPatchUserResponses[keyof ApiUsersUserIdPatchUserResponses];

export type ApiUsersGetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type ApiUsersGetUsersResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<GetUser>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ApiUsersGetUsersResponse = ApiUsersGetUsersResponses[keyof ApiUsersGetUsersResponses];

export type ApiUsersPostUserData = {
    body: PostUser;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type ApiUsersPostUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUsersPostUserError = ApiUsersPostUserErrors[keyof ApiUsersPostUserErrors];

export type ApiUsersPostUserResponses = {
    /**
     * Document created, URL follows
     */
    201: GetUser;
};

export type ApiUsersPostUserResponse = ApiUsersPostUserResponses[keyof ApiUsersPostUserResponses];

export type ApiUserAnswersUserAnswerIdDeleteUserAnswerData = {
    body?: never;
    path: {
        user_answer_id: number;
    };
    query?: never;
    url: '/api/user-answers/{user_answer_id}';
};

export type ApiUserAnswersUserAnswerIdDeleteUserAnswerErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUserAnswersUserAnswerIdDeleteUserAnswerError = ApiUserAnswersUserAnswerIdDeleteUserAnswerErrors[keyof ApiUserAnswersUserAnswerIdDeleteUserAnswerErrors];

export type ApiUserAnswersUserAnswerIdDeleteUserAnswerResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetUserAnswer;
};

export type ApiUserAnswersUserAnswerIdDeleteUserAnswerResponse = ApiUserAnswersUserAnswerIdDeleteUserAnswerResponses[keyof ApiUserAnswersUserAnswerIdDeleteUserAnswerResponses];

export type ApiUserAnswersUserAnswerIdGetUserAnswerData = {
    body?: never;
    path: {
        user_answer_id: number;
    };
    query?: never;
    url: '/api/user-answers/{user_answer_id}';
};

export type ApiUserAnswersUserAnswerIdGetUserAnswerErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUserAnswersUserAnswerIdGetUserAnswerError = ApiUserAnswersUserAnswerIdGetUserAnswerErrors[keyof ApiUserAnswersUserAnswerIdGetUserAnswerErrors];

export type ApiUserAnswersUserAnswerIdGetUserAnswerResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetUserAnswer;
};

export type ApiUserAnswersUserAnswerIdGetUserAnswerResponse = ApiUserAnswersUserAnswerIdGetUserAnswerResponses[keyof ApiUserAnswersUserAnswerIdGetUserAnswerResponses];

export type ApiUserAnswersUserAnswerIdPatchUserAnswerData = {
    body: PatchUserAnswer;
    path: {
        user_answer_id: number;
    };
    query?: never;
    url: '/api/user-answers/{user_answer_id}';
};

export type ApiUserAnswersUserAnswerIdPatchUserAnswerErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUserAnswersUserAnswerIdPatchUserAnswerError = ApiUserAnswersUserAnswerIdPatchUserAnswerErrors[keyof ApiUserAnswersUserAnswerIdPatchUserAnswerErrors];

export type ApiUserAnswersUserAnswerIdPatchUserAnswerResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetUserAnswer;
};

export type ApiUserAnswersUserAnswerIdPatchUserAnswerResponse = ApiUserAnswersUserAnswerIdPatchUserAnswerResponses[keyof ApiUserAnswersUserAnswerIdPatchUserAnswerResponses];

export type ApiUserAnswersAllGetAllUserAnswersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user-answers/all';
};

export type ApiUserAnswersAllGetAllUserAnswersResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<GetUserAnswer>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ApiUserAnswersAllGetAllUserAnswersResponse = ApiUserAnswersAllGetAllUserAnswersResponses[keyof ApiUserAnswersAllGetAllUserAnswersResponses];

export type ApiUserAnswersGetUserAnswersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user-answers';
};

export type ApiUserAnswersGetUserAnswersResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<GetUserAnswer>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ApiUserAnswersGetUserAnswersResponse = ApiUserAnswersGetUserAnswersResponses[keyof ApiUserAnswersGetUserAnswersResponses];

export type ApiUserAnswersPostUserAnswerData = {
    body: PostUserAnswer;
    path?: never;
    query?: never;
    url: '/api/user-answers';
};

export type ApiUserAnswersPostUserAnswerErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ApiUserAnswersPostUserAnswerError = ApiUserAnswersPostUserAnswerErrors[keyof ApiUserAnswersPostUserAnswerErrors];

export type ApiUserAnswersPostUserAnswerResponses = {
    /**
     * Document created, URL follows
     */
    201: GetUserAnswer;
};

export type ApiUserAnswersPostUserAnswerResponse = ApiUserAnswersPostUserAnswerResponses[keyof ApiUserAnswersPostUserAnswerResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};
