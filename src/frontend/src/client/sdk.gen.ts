// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ApiAuthMeGetUserData, ApiAuthMeGetUserResponses, ApiAuthLoginLoginData, ApiAuthLoginLoginResponses, ApiAuthLoginLoginErrors, ApiAuthLogoutLogoutData, ApiAuthLogoutLogoutResponses, ApiEventsEventIdDeleteEventData, ApiEventsEventIdDeleteEventResponses, ApiEventsEventIdDeleteEventErrors, ApiEventsEventIdGetEventData, ApiEventsEventIdGetEventResponses, ApiEventsEventIdGetEventErrors, ApiEventsEventIdPatchEventData, ApiEventsEventIdPatchEventResponses, ApiEventsEventIdPatchEventErrors, ApiEventsGetEventsData, ApiEventsGetEventsResponses, ApiEventsPostEventData, ApiEventsPostEventResponses, ApiEventsPostEventErrors, ApiGameAnswerQuestionAnswerQuestionData, ApiGameAnswerQuestionAnswerQuestionResponses, ApiGameAnswerQuestionAnswerQuestionErrors, ApiGameChatChatData, ApiGameChatChatResponses, ApiGameChatChatErrors, ApiGameCompleteConnectionCompleteConnectionData, ApiGameCompleteConnectionCompleteConnectionResponses, ApiGameStatusGetGameStatusData, ApiGameStatusGetGameStatusResponses, ApiGameScanQrScanQrCodeData, ApiGameScanQrScanQrCodeResponses, ApiGameScanQrScanQrCodeErrors, ApiGameStartStartGameData, ApiGameStartStartGameResponses, ApiGameStartStartGameErrors, ApiGameStopStopGameData, ApiGameStopStopGameResponses, ApiGameStopStopGameErrors, ApiQuestionsQuestionIdDeleteQuestionData, ApiQuestionsQuestionIdDeleteQuestionResponses, ApiQuestionsQuestionIdDeleteQuestionErrors, ApiQuestionsQuestionIdGetQuestionData, ApiQuestionsQuestionIdGetQuestionResponses, ApiQuestionsQuestionIdGetQuestionErrors, ApiQuestionsQuestionIdPatchQuestionData, ApiQuestionsQuestionIdPatchQuestionResponses, ApiQuestionsQuestionIdPatchQuestionErrors, ApiQuestionsGetQuestionsData, ApiQuestionsGetQuestionsResponses, ApiQuestionsPostQuestionData, ApiQuestionsPostQuestionResponses, ApiQuestionsPostQuestionErrors, ApiUsersUserIdDeleteUserData, ApiUsersUserIdDeleteUserResponses, ApiUsersUserIdDeleteUserErrors, ApiUsersUserIdGetUserData, ApiUsersUserIdGetUserResponses, ApiUsersUserIdGetUserErrors, ApiUsersUserIdPatchUserData, ApiUsersUserIdPatchUserResponses, ApiUsersUserIdPatchUserErrors, ApiUsersGetUsersData, ApiUsersGetUsersResponses, ApiUsersPostUserData, ApiUsersPostUserResponses, ApiUsersPostUserErrors, ApiUserAnswersUserAnswerIdDeleteUserAnswerData, ApiUserAnswersUserAnswerIdDeleteUserAnswerResponses, ApiUserAnswersUserAnswerIdDeleteUserAnswerErrors, ApiUserAnswersUserAnswerIdGetUserAnswerData, ApiUserAnswersUserAnswerIdGetUserAnswerResponses, ApiUserAnswersUserAnswerIdGetUserAnswerErrors, ApiUserAnswersUserAnswerIdPatchUserAnswerData, ApiUserAnswersUserAnswerIdPatchUserAnswerResponses, ApiUserAnswersUserAnswerIdPatchUserAnswerErrors, ApiUserAnswersAllGetAllUserAnswersData, ApiUserAnswersAllGetAllUserAnswersResponses, ApiUserAnswersGetUserAnswersData, ApiUserAnswersGetUserAnswersResponses, ApiUserAnswersPostUserAnswerData, ApiUserAnswersPostUserAnswerResponses, ApiUserAnswersPostUserAnswerErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * GetUser
 */
export const apiAuthMeGetUser = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthMeGetUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthMeGetUserResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Login
 */
export const apiAuthLoginLogin = <ThrowOnError extends boolean = false>(options: Options<ApiAuthLoginLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiAuthLoginLoginResponses, ApiAuthLoginLoginErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 */
export const apiAuthLogoutLogout = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthLogoutLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthLogoutLogoutResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * DeleteEvent
 */
export const apiEventsEventIdDeleteEvent = <ThrowOnError extends boolean = false>(options: Options<ApiEventsEventIdDeleteEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiEventsEventIdDeleteEventResponses, ApiEventsEventIdDeleteEventErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/{event_id}',
        ...options
    });
};

/**
 * GetEvent
 */
export const apiEventsEventIdGetEvent = <ThrowOnError extends boolean = false>(options: Options<ApiEventsEventIdGetEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiEventsEventIdGetEventResponses, ApiEventsEventIdGetEventErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/{event_id}',
        ...options
    });
};

/**
 * PatchEvent
 */
export const apiEventsEventIdPatchEvent = <ThrowOnError extends boolean = false>(options: Options<ApiEventsEventIdPatchEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiEventsEventIdPatchEventResponses, ApiEventsEventIdPatchEventErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/{event_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetEvents
 */
export const apiEventsGetEvents = <ThrowOnError extends boolean = false>(options?: Options<ApiEventsGetEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiEventsGetEventsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events',
        ...options
    });
};

/**
 * PostEvent
 */
export const apiEventsPostEvent = <ThrowOnError extends boolean = false>(options: Options<ApiEventsPostEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiEventsPostEventResponses, ApiEventsPostEventErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * AnswerQuestion
 */
export const apiGameAnswerQuestionAnswerQuestion = <ThrowOnError extends boolean = false>(options: Options<ApiGameAnswerQuestionAnswerQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiGameAnswerQuestionAnswerQuestionResponses, ApiGameAnswerQuestionAnswerQuestionErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/game/answer-question',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Chat
 */
export const apiGameChatChat = <ThrowOnError extends boolean = false>(options: Options<ApiGameChatChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiGameChatChatResponses, ApiGameChatChatErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/game/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * CompleteConnection
 */
export const apiGameCompleteConnectionCompleteConnection = <ThrowOnError extends boolean = false>(options?: Options<ApiGameCompleteConnectionCompleteConnectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ApiGameCompleteConnectionCompleteConnectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/game/complete-connection',
        ...options
    });
};

/**
 * GetGameStatus
 */
export const apiGameStatusGetGameStatus = <ThrowOnError extends boolean = false>(options?: Options<ApiGameStatusGetGameStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiGameStatusGetGameStatusResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/game/status',
        ...options
    });
};

/**
 * ScanQrCode
 */
export const apiGameScanQrScanQrCode = <ThrowOnError extends boolean = false>(options: Options<ApiGameScanQrScanQrCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiGameScanQrScanQrCodeResponses, ApiGameScanQrScanQrCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/game/scan-qr',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * StartGame
 */
export const apiGameStartStartGame = <ThrowOnError extends boolean = false>(options: Options<ApiGameStartStartGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiGameStartStartGameResponses, ApiGameStartStartGameErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/game/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * StopGame
 */
export const apiGameStopStopGame = <ThrowOnError extends boolean = false>(options: Options<ApiGameStopStopGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiGameStopStopGameResponses, ApiGameStopStopGameErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/game/stop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DeleteQuestion
 */
export const apiQuestionsQuestionIdDeleteQuestion = <ThrowOnError extends boolean = false>(options: Options<ApiQuestionsQuestionIdDeleteQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiQuestionsQuestionIdDeleteQuestionResponses, ApiQuestionsQuestionIdDeleteQuestionErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/questions/{question_id}',
        ...options
    });
};

/**
 * GetQuestion
 */
export const apiQuestionsQuestionIdGetQuestion = <ThrowOnError extends boolean = false>(options: Options<ApiQuestionsQuestionIdGetQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiQuestionsQuestionIdGetQuestionResponses, ApiQuestionsQuestionIdGetQuestionErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/questions/{question_id}',
        ...options
    });
};

/**
 * PatchQuestion
 */
export const apiQuestionsQuestionIdPatchQuestion = <ThrowOnError extends boolean = false>(options: Options<ApiQuestionsQuestionIdPatchQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiQuestionsQuestionIdPatchQuestionResponses, ApiQuestionsQuestionIdPatchQuestionErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/questions/{question_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetQuestions
 */
export const apiQuestionsGetQuestions = <ThrowOnError extends boolean = false>(options?: Options<ApiQuestionsGetQuestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiQuestionsGetQuestionsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/questions',
        ...options
    });
};

/**
 * PostQuestion
 */
export const apiQuestionsPostQuestion = <ThrowOnError extends boolean = false>(options: Options<ApiQuestionsPostQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiQuestionsPostQuestionResponses, ApiQuestionsPostQuestionErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/questions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DeleteUser
 */
export const apiUsersUserIdDeleteUser = <ThrowOnError extends boolean = false>(options: Options<ApiUsersUserIdDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiUsersUserIdDeleteUserResponses, ApiUsersUserIdDeleteUserErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * GetUser
 */
export const apiUsersUserIdGetUser = <ThrowOnError extends boolean = false>(options: Options<ApiUsersUserIdGetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUsersUserIdGetUserResponses, ApiUsersUserIdGetUserErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * PatchUser
 */
export const apiUsersUserIdPatchUser = <ThrowOnError extends boolean = false>(options: Options<ApiUsersUserIdPatchUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUsersUserIdPatchUserResponses, ApiUsersUserIdPatchUserErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetUsers
 */
export const apiUsersGetUsers = <ThrowOnError extends boolean = false>(options?: Options<ApiUsersGetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiUsersGetUsersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options
    });
};

/**
 * PostUser
 */
export const apiUsersPostUser = <ThrowOnError extends boolean = false>(options: Options<ApiUsersPostUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiUsersPostUserResponses, ApiUsersPostUserErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DeleteUserAnswer
 */
export const apiUserAnswersUserAnswerIdDeleteUserAnswer = <ThrowOnError extends boolean = false>(options: Options<ApiUserAnswersUserAnswerIdDeleteUserAnswerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiUserAnswersUserAnswerIdDeleteUserAnswerResponses, ApiUserAnswersUserAnswerIdDeleteUserAnswerErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-answers/{user_answer_id}',
        ...options
    });
};

/**
 * GetUserAnswer
 */
export const apiUserAnswersUserAnswerIdGetUserAnswer = <ThrowOnError extends boolean = false>(options: Options<ApiUserAnswersUserAnswerIdGetUserAnswerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUserAnswersUserAnswerIdGetUserAnswerResponses, ApiUserAnswersUserAnswerIdGetUserAnswerErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-answers/{user_answer_id}',
        ...options
    });
};

/**
 * PatchUserAnswer
 */
export const apiUserAnswersUserAnswerIdPatchUserAnswer = <ThrowOnError extends boolean = false>(options: Options<ApiUserAnswersUserAnswerIdPatchUserAnswerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUserAnswersUserAnswerIdPatchUserAnswerResponses, ApiUserAnswersUserAnswerIdPatchUserAnswerErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-answers/{user_answer_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetAllUserAnswers
 */
export const apiUserAnswersAllGetAllUserAnswers = <ThrowOnError extends boolean = false>(options?: Options<ApiUserAnswersAllGetAllUserAnswersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiUserAnswersAllGetAllUserAnswersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-answers/all',
        ...options
    });
};

/**
 * GetUserAnswers
 */
export const apiUserAnswersGetUserAnswers = <ThrowOnError extends boolean = false>(options?: Options<ApiUserAnswersGetUserAnswersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiUserAnswersGetUserAnswersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-answers',
        ...options
    });
};

/**
 * PostUserAnswer
 */
export const apiUserAnswersPostUserAnswer = <ThrowOnError extends boolean = false>(options: Options<ApiUserAnswersPostUserAnswerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiUserAnswersPostUserAnswerResponses, ApiUserAnswersPostUserAnswerErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-answers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
